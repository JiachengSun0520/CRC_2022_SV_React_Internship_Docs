{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Introduction SV React Frontend is a prototype frontend application for the Slave Voyage website. The application is based on React library and uses Material UI for most of its UI components. The application allows users to filter among large data about slave voyages in both Trans-Atlantic and Intra-America datasets as well as slaved and enslaved people, and provides multiple ways of visualizing the data. These visualizations include scatter plots, bar charts, pie charts, tables, pivot tables, and maps for voyages, and sankey diagram, network diagram and story cards for enslaved people and enslavers. It also holds a collection of digital documents for detailed views. This document will introduce all the major components used in the project, the methods used to transfer data among components, and routes defined inside the application. Outline Components Methods Routers Installation & Environment How it run on localhost: 1. Clone the project to local git clone git@github.com:ZhihaoWan/Integ_CRC.git 2. Run npm install 3. Run npm start Website Link: voyages3-react page Deploy Manually Since we found package-lock.json will casuse OCI deployment process error, we summarized a workflow to avoid that: use nvm (Node version management) tool make sure node -version is \"correct \" 1.1: Check your local node version by node -v and npm version with npm -v 1.2: Make sure the versions are same as top of this README Delete node_modules && package-lock.json file run npm install Delete node_modules run npm ci Locally test (run npm start , if all functions goes well, Prefect!) If funciton on local serve is perfect then push & merge Deploy with Makefile Quick Way with Makefile Make sure you are in the main branch if you use this make file first time, just run chmod u+x Makefile run make deploy , util see \"deploy successfully\"","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#introduction","text":"SV React Frontend is a prototype frontend application for the Slave Voyage website. The application is based on React library and uses Material UI for most of its UI components. The application allows users to filter among large data about slave voyages in both Trans-Atlantic and Intra-America datasets as well as slaved and enslaved people, and provides multiple ways of visualizing the data. These visualizations include scatter plots, bar charts, pie charts, tables, pivot tables, and maps for voyages, and sankey diagram, network diagram and story cards for enslaved people and enslavers. It also holds a collection of digital documents for detailed views. This document will introduce all the major components used in the project, the methods used to transfer data among components, and routes defined inside the application.","title":"Introduction"},{"location":"#outline","text":"","title":"Outline"},{"location":"#components","text":"","title":"Components"},{"location":"#methods","text":"","title":"Methods"},{"location":"#routers","text":"","title":"Routers"},{"location":"#installation-environment","text":"","title":"Installation &amp; Environment"},{"location":"#how-it-run-on-localhost","text":"1. Clone the project to local git clone git@github.com:ZhihaoWan/Integ_CRC.git 2. Run npm install 3. Run npm start Website Link: voyages3-react page","title":"How it run on localhost:"},{"location":"#deploy-manually","text":"Since we found package-lock.json will casuse OCI deployment process error, we summarized a workflow to avoid that: use nvm (Node version management) tool make sure node -version is \"correct \" 1.1: Check your local node version by node -v and npm version with npm -v 1.2: Make sure the versions are same as top of this README Delete node_modules && package-lock.json file run npm install Delete node_modules run npm ci Locally test (run npm start , if all functions goes well, Prefect!) If funciton on local serve is perfect then push & merge","title":"Deploy Manually"},{"location":"#deploy-with-makefile","text":"Quick Way with Makefile Make sure you are in the main branch if you use this make file first time, just run chmod u+x Makefile run make deploy , util see \"deploy successfully\"","title":"Deploy with Makefile"},{"location":"Components_Home/","text":"Components Home Filter Cards Cascading Charts Documents Map Modals UVModals Network Option_Selector Pivot_Table Sankey Table","title":"Components Home"},{"location":"Components_Home/#components-home","text":"","title":"Components Home"},{"location":"Components_Home/#filter","text":"","title":"Filter"},{"location":"Components_Home/#cards","text":"","title":"Cards"},{"location":"Components_Home/#cascading","text":"","title":"Cascading"},{"location":"Components_Home/#charts","text":"","title":"Charts"},{"location":"Components_Home/#documents","text":"","title":"Documents"},{"location":"Components_Home/#map","text":"","title":"Map"},{"location":"Components_Home/#modals","text":"","title":"Modals"},{"location":"Components_Home/#uvmodals","text":"","title":"UVModals"},{"location":"Components_Home/#network","text":"","title":"Network"},{"location":"Components_Home/#option_selector","text":"","title":"Option_Selector"},{"location":"Components_Home/#pivot_table","text":"","title":"Pivot_Table"},{"location":"Components_Home/#sankey","text":"","title":"Sankey"},{"location":"Components_Home/#table","text":"","title":"Table"},{"location":"Methods_Home/","text":"Methods Home Component_Fac Data_Passing Filter_Object Flat_Files Lazy_Loading Post_Request","title":"Methods Home"},{"location":"Methods_Home/#methods-home","text":"","title":"Methods Home"},{"location":"Methods_Home/#component_fac","text":"","title":"Component_Fac"},{"location":"Methods_Home/#data_passing","text":"","title":"Data_Passing"},{"location":"Methods_Home/#filter_object","text":"","title":"Filter_Object"},{"location":"Methods_Home/#flat_files","text":"","title":"Flat_Files"},{"location":"Methods_Home/#lazy_loading","text":"","title":"Lazy_Loading"},{"location":"Methods_Home/#post_request","text":"","title":"Post_Request"},{"location":"Routers/","text":"Routers endpoint path=\"/\": home page path=\"/voyage/scatter\": Voyage page Scatter app path=\"/voyage/bar\": Voyage page Bar app path=\"/voyage/pie\": Voyage page Pie app path=\"/voyage/Table\": Voyage page Table app path=\"/voyage/Pivot\": Voyage page Scatter app path=\"/voyage/map\": Voyage page Map app path=\"/past/enslaved\" PAST page enslaved app path=\"/past/enslaver\" PAST page enslaver app path=\"/documents\": document page path=\"/optionSelector\": developer tool: Option Selector","title":"Routers"},{"location":"Routers/#routers","text":"","title":"Routers"},{"location":"Routers/#endpoint","text":"path=\"/\": home page path=\"/voyage/scatter\": Voyage page Scatter app path=\"/voyage/bar\": Voyage page Bar app path=\"/voyage/pie\": Voyage page Pie app path=\"/voyage/Table\": Voyage page Table app path=\"/voyage/Pivot\": Voyage page Scatter app path=\"/voyage/map\": Voyage page Map app path=\"/past/enslaved\" PAST page enslaved app path=\"/past/enslaver\" PAST page enslaver app path=\"/documents\": document page path=\"/optionSelector\": developer tool: Option Selector","title":"endpoint"},{"location":"Components/Cards/","text":"OverView Cards are universal component throughout the apps, adopted and serve as another way of visualization on individual's infomation (including enslavers and enslaved people), providing fast look-through into database. User could switch between two view modes by buttons. Features The card components is based on Matterial-UI/Cards , contains content reorgnizing and provides features: Key info display Multi-platform flex display support Pignation navigation support Detail info extension(optional) Sankey/Network Modal remote control(optional) Package importing Cards need support from Lodash for data processing and Material-UI for display support: npm install: npm i -g npm In-file importing: import { Button, Card, CardHeader, CardContent, Grid } from \"@mui/material\"; import { styled } from '@mui/material/styles'; import _ from 'lodash'; Styling Modification Card Styles are modified by both local file and customizable Material-UI sytle endpoints. Card overall /*supposed to add in local css file:*/ @media (min-width: 800px){ .enslaved_story{ height: \"100%\"; } .enslaver_story_func_head{ height: 4em; } } .storybackground{ background-color: #ececea ; } Material UI { Style } /*In javascript*/ const Div = styled('div')(({ theme }) => ({ ...theme.typography.overline, backgroundColor: theme.palette.background.paper, padding: theme.spacing(1), })); const ExpandMore = styled((props) => { const { expand, ...other } = props; return <ExpandMoreIcon {...other} />; })(({ theme, expand }) => ({ transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)', marginLeft: 'auto', transition: theme.transitions.create('transform', { duration: theme.transitions.duration.shortest, }), })); Flexible box <Grid container spacing={{ xs: 6, md: 4, lg:5}} padding={{ xs: 4, md: 3, lg:4 }}> <Grid item xs={12} sm={6} md={4} lg={3}> <DIY Component /> </Grid> </Grid> Props Prop Type Default Description Icon target Object The enslaver/enslaved_people object that contains attributes dynamic boolean false This decides if the card is simple or extendable with ExpandIcon canRemote boolean false This decides if the card could call outside funcitons and displays ManageSearch icon Dataset Number According to SlaveVoyage database archive, Story.js will disable ManageSearch icon and hide it when it's dataset 0 (TRANS-ATLANTIC) remoteControl Function Function called when clicking the ManageSearch icon, to switch on the Sankey/Network/Story modal dataChange Function Function called when clicking the ManageSearch icon, to reset the selectedData useState in the EnslavedApp/EnslaverApp slavery String(\"enslaved\" | \"enslaver\") Story.js will do different content processing of target Warning: Each child in a list should have a unique \"key\" prop This warning might appear when multiple < Story /> components are mapped and rendered from data collections. To remove this warning, appending additional key attribute to <Story /> would be a solid solution adopting index if there's only one-layer of mapping. /* JSX return slots*/ {collections.map((item, index)) => { return <Story key={index} target={item} ... /> }} /* JSX return slots*/ adoping unique attribute in target . /* JSX return slots*/ {collections.map(item => { return <Story key={item.id} target={item} ... /> }} /* JSX return slots*/ for multiple return JSXes, making random number generator is also an approach. For example, UUID ,which is also npm supported /* JSX return slots*/ {collections.map((item) => { return( <Story key={SomeLibrary.generateUniqueID()} .../> <AnotherComponent key={SomeLibrary.generateUniqueID()}/> <AnotherComponent key={SomeLibrary.generateUniqueID()}/> ... ) })} /* JSX return slots*/","title":"OverView"},{"location":"Components/Cards/#overview","text":"Cards are universal component throughout the apps, adopted and serve as another way of visualization on individual's infomation (including enslavers and enslaved people), providing fast look-through into database. User could switch between two view modes by buttons.","title":"OverView"},{"location":"Components/Cards/#features","text":"The card components is based on Matterial-UI/Cards , contains content reorgnizing and provides features: Key info display Multi-platform flex display support Pignation navigation support Detail info extension(optional) Sankey/Network Modal remote control(optional)","title":"Features"},{"location":"Components/Cards/#package-importing","text":"Cards need support from Lodash for data processing and Material-UI for display support: npm install: npm i -g npm In-file importing: import { Button, Card, CardHeader, CardContent, Grid } from \"@mui/material\"; import { styled } from '@mui/material/styles'; import _ from 'lodash';","title":"Package importing"},{"location":"Components/Cards/#styling-modification","text":"Card Styles are modified by both local file and customizable Material-UI sytle endpoints. Card overall /*supposed to add in local css file:*/ @media (min-width: 800px){ .enslaved_story{ height: \"100%\"; } .enslaver_story_func_head{ height: 4em; } } .storybackground{ background-color: #ececea ; } Material UI { Style } /*In javascript*/ const Div = styled('div')(({ theme }) => ({ ...theme.typography.overline, backgroundColor: theme.palette.background.paper, padding: theme.spacing(1), })); const ExpandMore = styled((props) => { const { expand, ...other } = props; return <ExpandMoreIcon {...other} />; })(({ theme, expand }) => ({ transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)', marginLeft: 'auto', transition: theme.transitions.create('transform', { duration: theme.transitions.duration.shortest, }), })); Flexible box <Grid container spacing={{ xs: 6, md: 4, lg:5}} padding={{ xs: 4, md: 3, lg:4 }}> <Grid item xs={12} sm={6} md={4} lg={3}> <DIY Component /> </Grid> </Grid>","title":"Styling Modification"},{"location":"Components/Cards/#props","text":"Prop Type Default Description Icon target Object The enslaver/enslaved_people object that contains attributes dynamic boolean false This decides if the card is simple or extendable with ExpandIcon canRemote boolean false This decides if the card could call outside funcitons and displays ManageSearch icon Dataset Number According to SlaveVoyage database archive, Story.js will disable ManageSearch icon and hide it when it's dataset 0 (TRANS-ATLANTIC) remoteControl Function Function called when clicking the ManageSearch icon, to switch on the Sankey/Network/Story modal dataChange Function Function called when clicking the ManageSearch icon, to reset the selectedData useState in the EnslavedApp/EnslaverApp slavery String(\"enslaved\" | \"enslaver\") Story.js will do different content processing of target","title":"Props"},{"location":"Components/Cards/#warning-each-child-in-a-list-should-have-a-unique-key-prop","text":"This warning might appear when multiple < Story /> components are mapped and rendered from data collections. To remove this warning, appending additional key attribute to <Story /> would be a solid solution adopting index if there's only one-layer of mapping. /* JSX return slots*/ {collections.map((item, index)) => { return <Story key={index} target={item} ... /> }} /* JSX return slots*/ adoping unique attribute in target . /* JSX return slots*/ {collections.map(item => { return <Story key={item.id} target={item} ... /> }} /* JSX return slots*/ for multiple return JSXes, making random number generator is also an approach. For example, UUID ,which is also npm supported /* JSX return slots*/ {collections.map((item) => { return( <Story key={SomeLibrary.generateUniqueID()} .../> <AnotherComponent key={SomeLibrary.generateUniqueID()}/> <AnotherComponent key={SomeLibrary.generateUniqueID()}/> ... ) })} /* JSX return slots*/","title":"Warning: Each child in a list should have a unique \"key\" prop"},{"location":"Components/Cascading/","text":"Cascading The Cascading is the component serving as a muti-levels menu which provides options for users to select. Same as the popular Cascading menu, our Cascading menu supports expansion and collapse according to the event of the cursor. Our Cascading menus based on a npm package called mui-nested-menu , however we extract ChevronRight.js, IconMenuItem.js and NestedMenuItem.js to enable scrolling on nested menu. The essential inputs for Cascading menu is a nested variable-tree and a option-flat . The Cascading menu does recursive call on the nested variable-tree and map each variable to the option-flat file to get a correct option label. Those selected variables from Cascading menus are stored for other components, for example filter and table . isChildren(node) -> check if the node is valid. function isChildren(key) { if (key) return true; else return false } isLast(node) -> check if the node is last node/tail. function isLast(node) { return node === null } containsOnly(node) -> check if dict[key] contains only one variable. If there is only one variable, the recursive call will automatically extract it out to one level up. function containsOnly(node) { if (Object.keys(node).length === 1) return true; return false; } renderTree(node) -> This example is from FilterSelector, and the renderTree in ColumnSelector is quite similar with that in FilterSelector. renderTree does recursive calls to nested variable-tree and render the menu. const renderTree = (nodes) => { return ( Object.keys(nodes).map((key) => isChildren(key) ? isLast(nodes[key]) ? <MenuItem value={key} key={key} onClick={() => { handleOptionClick(key) }}> {options_flat[key].flatlabel} </MenuItem> : containsOnly(nodes[key]) ? renderTree(nodes[key]) : <NestedMenuItem key={key} label={options_flat[key].flatlabel} parentMenuOpen={open} onClick={handleClose} > {renderTree(nodes[key])} </NestedMenuItem> : null ) ) }; Cascading in Filter (FilterSelector) There are some differences between FilterSelector cascading menu and ColumnSelector cascading menu. handleOptionClick in FilterSelector set the filter_obj when clicking event happens. const handleOptionClick = (key) => { handleClose(); if (key in filter_obj) { alert(\"The variable has been selected.\") } else { set_filter_obj({ ...filter_obj, [key]: [] }) } } Also, another differnce is that FilterSelector takes first level as a button not a menu, which means if the dict[key] is the only level in nested variable-tree, the cascading menu will not pop out, and the click events will happens on the button. <Button variant=\"text\" onClick={() => handleOptionClick(key)} style={{ maxWidth: '280px', maxHeight: '30px', color: \"#fff\" }} > {options_flat[key].flatlabel} </Button> Cascading in Table (ColumnSelector) handleOptionClick in ColumnSelector set the lists of visiable column options. const handleOptionClick = (option) => { setColumnVisibilityModel({...columnVisibilityModel, [option]: true}) handleClose(); }","title":"Cascading"},{"location":"Components/Cascading/#cascading","text":"The Cascading is the component serving as a muti-levels menu which provides options for users to select. Same as the popular Cascading menu, our Cascading menu supports expansion and collapse according to the event of the cursor. Our Cascading menus based on a npm package called mui-nested-menu , however we extract ChevronRight.js, IconMenuItem.js and NestedMenuItem.js to enable scrolling on nested menu. The essential inputs for Cascading menu is a nested variable-tree and a option-flat . The Cascading menu does recursive call on the nested variable-tree and map each variable to the option-flat file to get a correct option label. Those selected variables from Cascading menus are stored for other components, for example filter and table . isChildren(node) -> check if the node is valid. function isChildren(key) { if (key) return true; else return false } isLast(node) -> check if the node is last node/tail. function isLast(node) { return node === null } containsOnly(node) -> check if dict[key] contains only one variable. If there is only one variable, the recursive call will automatically extract it out to one level up. function containsOnly(node) { if (Object.keys(node).length === 1) return true; return false; } renderTree(node) -> This example is from FilterSelector, and the renderTree in ColumnSelector is quite similar with that in FilterSelector. renderTree does recursive calls to nested variable-tree and render the menu. const renderTree = (nodes) => { return ( Object.keys(nodes).map((key) => isChildren(key) ? isLast(nodes[key]) ? <MenuItem value={key} key={key} onClick={() => { handleOptionClick(key) }}> {options_flat[key].flatlabel} </MenuItem> : containsOnly(nodes[key]) ? renderTree(nodes[key]) : <NestedMenuItem key={key} label={options_flat[key].flatlabel} parentMenuOpen={open} onClick={handleClose} > {renderTree(nodes[key])} </NestedMenuItem> : null ) ) };","title":"Cascading"},{"location":"Components/Cascading/#cascading-in-filter-filterselector","text":"There are some differences between FilterSelector cascading menu and ColumnSelector cascading menu. handleOptionClick in FilterSelector set the filter_obj when clicking event happens. const handleOptionClick = (key) => { handleClose(); if (key in filter_obj) { alert(\"The variable has been selected.\") } else { set_filter_obj({ ...filter_obj, [key]: [] }) } } Also, another differnce is that FilterSelector takes first level as a button not a menu, which means if the dict[key] is the only level in nested variable-tree, the cascading menu will not pop out, and the click events will happens on the button. <Button variant=\"text\" onClick={() => handleOptionClick(key)} style={{ maxWidth: '280px', maxHeight: '30px', color: \"#fff\" }} > {options_flat[key].flatlabel} </Button>","title":"Cascading in Filter (FilterSelector)"},{"location":"Components/Cascading/#cascading-in-table-columnselector","text":"handleOptionClick in ColumnSelector set the lists of visiable column options. const handleOptionClick = (option) => { setColumnVisibilityModel({...columnVisibilityModel, [option]: true}) handleClose(); }","title":"Cascading in Table (ColumnSelector)"},{"location":"Components/Charts/","text":"Charts Overview The Chart part includes Scatter, Bar and Pie, which all implement with MUI for UI layout purpose and React-Plotly to wrap passing data as reuseable React components. The chart compoent support features as following: General Features data interactivable plotly graph data visualization of Django API data dropdown menu of select fields and radio button of aggregation function multiselct of y field in bar chart and enable/ disable by clicking in select field or the colored blocks real time changing names of title, y-axis and x-axis Bar supports fetching multiple y-axis data and representing results side by side with different color Merge multiple request time into once MergeCallTimes: Since multiple Y-field request multiple times, merge multiple times as once could effectively avoid `CORS` error Pie support users to check proportion of each sector with different color visualization Scatter smooth spline helps users check the trends of data selected External Package Used MUI MUI Menu Part (Field Selecotr) InputLabel MenuItem FormControl Select Chip (to respresent choosen multiple y field single element) Radio Error Message Alert Alert Title Alert Layout Box Grid React-Plotly React-Plotly : The main package contain methods to connect with API and chart user-friendly data visualization result as React components useWindowSize useWindowSize Functions Customization Customized Style function getStyles(name, chips, theme) { return { fontWeight: chips.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium, }; } Directory src | |___VoyageApp | |___Component |___VoyageBar.js |___VoyagePie.js |___VoyageScatter.js","title":"Charts"},{"location":"Components/Charts/#charts","text":"","title":"Charts"},{"location":"Components/Charts/#overview","text":"The Chart part includes Scatter, Bar and Pie, which all implement with MUI for UI layout purpose and React-Plotly to wrap passing data as reuseable React components. The chart compoent support features as following:","title":"Overview"},{"location":"Components/Charts/#general-features","text":"data interactivable plotly graph data visualization of Django API data dropdown menu of select fields and radio button of aggregation function multiselct of y field in bar chart and enable/ disable by clicking in select field or the colored blocks real time changing names of title, y-axis and x-axis","title":"General Features"},{"location":"Components/Charts/#bar","text":"supports fetching multiple y-axis data and representing results side by side with different color Merge multiple request time into once MergeCallTimes: Since multiple Y-field request multiple times, merge multiple times as once could effectively avoid `CORS` error","title":"Bar"},{"location":"Components/Charts/#pie","text":"support users to check proportion of each sector with different color visualization","title":"Pie"},{"location":"Components/Charts/#scatter","text":"smooth spline helps users check the trends of data selected","title":"Scatter"},{"location":"Components/Charts/#external-package-used","text":"","title":"External Package Used"},{"location":"Components/Charts/#mui","text":"MUI Menu Part (Field Selecotr) InputLabel MenuItem FormControl Select Chip (to respresent choosen multiple y field single element) Radio Error Message Alert Alert Title Alert Layout Box Grid","title":"MUI"},{"location":"Components/Charts/#react-plotly","text":"React-Plotly : The main package contain methods to connect with API and chart user-friendly data visualization result as React components","title":"React-Plotly"},{"location":"Components/Charts/#usewindowsize","text":"useWindowSize","title":"useWindowSize"},{"location":"Components/Charts/#functions","text":"","title":"Functions"},{"location":"Components/Charts/#customization","text":"Customized Style function getStyles(name, chips, theme) { return { fontWeight: chips.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium, }; }","title":"Customization"},{"location":"Components/Charts/#directory","text":"src | |___VoyageApp | |___Component |___VoyageBar.js |___VoyagePie.js |___VoyageScatter.js","title":"Directory"},{"location":"Components/Documents/","text":"Overview Documents are used to provide deep insight into SlaveVoyage archives Features Capable of fetching and presenting IIIF pictures Integrated Universal Viewer with SlaveVoyage's React framework Handling with IIIF API 3.0's squaring pre-process for uniformed photo size Responsive flexbox layouts for devices of different screen size LazyLoading in multi-round api fetching to lift application performance Package Importing Universal Viewer for IIIF document support npm install universalviewer --save /*To Use:*/ import \"universalviewer/dist/esm/index.css\"; import { init } from \"universalviewer\"; Lazy Loading package import npm i --save react-lazy-load-image-component /*To Use:*/ import { LazyLoadImage, trackWindowScroll } from \"react-lazy-load-image-component\"; import \"react-lazy-load-image-component/src/effects/opacity.css\"; Data fetching Overall 3 rounds of api requests are called on different servers to finish thumbnail gallery rendering Extra 1 round of UniversalViewer manifest feeding is executed to get document details Universal Viewer config Due to inactivity in open-source maintenance, importing default css from universalviewer will lead to render disorder. We've reorganized UV component and warp it with Modal, for poping-up use. function useUniversalViewer(ref, options) { const [uv, setUv] = useState(); useLayoutEffect(() => { const currentUv = init(ref.current, options); setUv(currentUv); return () => { currentUv.dispose(); }; }, []); return uv; } const UV = ({ manifest, parentWidth }) => { const el = useRef(); const viewer = useUniversalViewer( el, { manifest, } ); return <div ref={el} className=\"uv\" style={{ width: \"50vw\", height: \"50vh\" }} />; }; LazyLoading Wrapping By warpping each ArchiveItem with trackWindowScroll , all photoes are anchored with accurate screen coordinate. In this way, our application can keep track of users' \"view region\" thus will only send new fetch requests to backend when the screen is to leave the last region boundry. /*external calling code in Archive.js*/ {apiUrl.map((item,index) => { return <ArchiveItem scrollPosition={window.scrollY}/> })} /*internal interface exposure*/ function ArchiveItem(props){ const { scrollPosition, ....} = props return ... } export default trackWindowScroll(ArchiveItem); we also use LayLoading in other structures, see LazyLoading_In_Methods Props Prop Type Default Description handleOpen Function Functions to be called after clicking the thumbnail text links. It will switch on the UV modal for high resolution picture manifest fetching iifUrl String Link that UV modal need as a manifest for next-step IIIF endpoint communication scrollPosition Object Object containing coordiate information with the curent window scroll position. Required .","title":"Overview"},{"location":"Components/Documents/#overview","text":"Documents are used to provide deep insight into SlaveVoyage archives","title":"Overview"},{"location":"Components/Documents/#features","text":"Capable of fetching and presenting IIIF pictures Integrated Universal Viewer with SlaveVoyage's React framework Handling with IIIF API 3.0's squaring pre-process for uniformed photo size Responsive flexbox layouts for devices of different screen size LazyLoading in multi-round api fetching to lift application performance","title":"Features"},{"location":"Components/Documents/#package-importing","text":"Universal Viewer for IIIF document support npm install universalviewer --save /*To Use:*/ import \"universalviewer/dist/esm/index.css\"; import { init } from \"universalviewer\"; Lazy Loading package import npm i --save react-lazy-load-image-component /*To Use:*/ import { LazyLoadImage, trackWindowScroll } from \"react-lazy-load-image-component\"; import \"react-lazy-load-image-component/src/effects/opacity.css\";","title":"Package Importing"},{"location":"Components/Documents/#data-fetching","text":"Overall 3 rounds of api requests are called on different servers to finish thumbnail gallery rendering Extra 1 round of UniversalViewer manifest feeding is executed to get document details","title":"Data fetching"},{"location":"Components/Documents/#universal-viewer-config","text":"Due to inactivity in open-source maintenance, importing default css from universalviewer will lead to render disorder. We've reorganized UV component and warp it with Modal, for poping-up use. function useUniversalViewer(ref, options) { const [uv, setUv] = useState(); useLayoutEffect(() => { const currentUv = init(ref.current, options); setUv(currentUv); return () => { currentUv.dispose(); }; }, []); return uv; } const UV = ({ manifest, parentWidth }) => { const el = useRef(); const viewer = useUniversalViewer( el, { manifest, } ); return <div ref={el} className=\"uv\" style={{ width: \"50vw\", height: \"50vh\" }} />; };","title":"Universal Viewer config"},{"location":"Components/Documents/#lazyloading-wrapping","text":"By warpping each ArchiveItem with trackWindowScroll , all photoes are anchored with accurate screen coordinate. In this way, our application can keep track of users' \"view region\" thus will only send new fetch requests to backend when the screen is to leave the last region boundry. /*external calling code in Archive.js*/ {apiUrl.map((item,index) => { return <ArchiveItem scrollPosition={window.scrollY}/> })} /*internal interface exposure*/ function ArchiveItem(props){ const { scrollPosition, ....} = props return ... } export default trackWindowScroll(ArchiveItem); we also use LayLoading in other structures, see LazyLoading_In_Methods","title":"LazyLoading Wrapping"},{"location":"Components/Documents/#props","text":"Prop Type Default Description handleOpen Function Functions to be called after clicking the thumbnail text links. It will switch on the UV modal for high resolution picture manifest fetching iifUrl String Link that UV modal need as a manifest for next-step IIIF endpoint communication scrollPosition Object Object containing coordiate information with the curent window scroll position. Required .","title":"Props"},{"location":"Components/Filter/","text":"Filter Overview The Filter is used to filter the result based on user selection. Users can filter on variables of different types including numberic, text, or visual filters. For each type of variable, there are different filter components including range sliders, multi-selections with autocomplete, and bounding boxes on the map. These filters will carry along in the Voyage app and Past app and affect other components. This page will introduce these filters extensively. Range Slider The Range Slider is used for selecting value ranges for numberic values. The component uses MUI components Slider and Input and support features including: setting the default range as minimum and maximum values of the variable selected drag the slider to change the range click on the slider bar to change the range enter values in the input boxes to change the range adjust the value to minimum or maximum when the value entered in the input box is out of range An example Range Slider component looks like following: External Component Used MUI Slider : slider component from Material-UI library MUI Input : input box component from Material-UI library Functions Name Functionality GetSlider Render range slider component based on the varibale selected handleCommittedChange Set the value when user drags the slider, update filter object handleChange Set the value when user clicks on the slider bar handleBlur Handle the situation when the input value is out of range, update filter object Auto Complete Overview The Autocomplete component is used for making suggestions of search terms based on the current user input. It is used both at the past/ and voyage/ endpoint The Autocomplete component support features including: selecting multiple values from the autocomplete dropdown menu. deleting selection or modifying text input matching unusual characters like \"\u00e7\" Update results based on the value of other filter components ambiguous matching An example of Auto Complete: External Package Used Material UI Functions Name Functionality endpoint Switch between past/ and voyage/ endpoint for fetch requests fetchData Post request for fetching autocomplete dropdown menu options onChange Resets search object each time user input is changed renderInput Displays user input in the search box and updates textInput for post request Bounding Box Overview The Bounding Box component is used for selecting a certain area on the map in which the voyages begin or end. It is used only in /voyage endpoint. The component support features including: - select a box on the map to filter the voyages that begin or end in the area - reset the selection An example of the bounding box looks like the following: External Package Used leaflet-area-select : select the area on the map MapContainer from React-Leaflet: container that holds the map TileLayer, LayersControl from React-Leaflet: controls the different layers in the map Functions Name Functionality resetBox Reset the selected box by removing corresponding key-value pairs in filter object AreaSelect Set the filter object after the box is drawn on the map Overview The Autocomplete component is used for making suggestions of search terms based on the current user input. It is used both at the past/ and voyage/ endpoint Component Factory Overview Whenenver a filter component is selected, the ComponentFac function switches between serving different components (such as the slider or the autocomplete function) by checking the type of the flatlabel of the selected option(s). Directory src | |___CommonComponent | | | |___Filter | |___Autocomplete.js | |___Slider.js | |___ComponentFac.js | |___Component |___AreaSelect.jsx |___BoundingBoxFilter.js","title":"Filter"},{"location":"Components/Filter/#filter","text":"","title":"Filter"},{"location":"Components/Filter/#overview","text":"The Filter is used to filter the result based on user selection. Users can filter on variables of different types including numberic, text, or visual filters. For each type of variable, there are different filter components including range sliders, multi-selections with autocomplete, and bounding boxes on the map. These filters will carry along in the Voyage app and Past app and affect other components. This page will introduce these filters extensively.","title":"Overview"},{"location":"Components/Filter/#range-slider","text":"The Range Slider is used for selecting value ranges for numberic values. The component uses MUI components Slider and Input and support features including: setting the default range as minimum and maximum values of the variable selected drag the slider to change the range click on the slider bar to change the range enter values in the input boxes to change the range adjust the value to minimum or maximum when the value entered in the input box is out of range An example Range Slider component looks like following:","title":"Range Slider"},{"location":"Components/Filter/#external-component-used","text":"MUI Slider : slider component from Material-UI library MUI Input : input box component from Material-UI library","title":"External Component Used"},{"location":"Components/Filter/#functions","text":"Name Functionality GetSlider Render range slider component based on the varibale selected handleCommittedChange Set the value when user drags the slider, update filter object handleChange Set the value when user clicks on the slider bar handleBlur Handle the situation when the input value is out of range, update filter object","title":"Functions"},{"location":"Components/Filter/#auto-complete","text":"","title":"Auto Complete"},{"location":"Components/Filter/#overview_1","text":"The Autocomplete component is used for making suggestions of search terms based on the current user input. It is used both at the past/ and voyage/ endpoint The Autocomplete component support features including: selecting multiple values from the autocomplete dropdown menu. deleting selection or modifying text input matching unusual characters like \"\u00e7\" Update results based on the value of other filter components ambiguous matching An example of Auto Complete:","title":"Overview"},{"location":"Components/Filter/#external-package-used","text":"Material UI","title":"External Package Used"},{"location":"Components/Filter/#functions_1","text":"Name Functionality endpoint Switch between past/ and voyage/ endpoint for fetch requests fetchData Post request for fetching autocomplete dropdown menu options onChange Resets search object each time user input is changed renderInput Displays user input in the search box and updates textInput for post request","title":"Functions"},{"location":"Components/Filter/#bounding-box","text":"","title":"Bounding Box"},{"location":"Components/Filter/#overview_2","text":"The Bounding Box component is used for selecting a certain area on the map in which the voyages begin or end. It is used only in /voyage endpoint. The component support features including: - select a box on the map to filter the voyages that begin or end in the area - reset the selection An example of the bounding box looks like the following:","title":"Overview"},{"location":"Components/Filter/#external-package-used_1","text":"leaflet-area-select : select the area on the map MapContainer from React-Leaflet: container that holds the map TileLayer, LayersControl from React-Leaflet: controls the different layers in the map","title":"External Package Used"},{"location":"Components/Filter/#functions_2","text":"Name Functionality resetBox Reset the selected box by removing corresponding key-value pairs in filter object AreaSelect Set the filter object after the box is drawn on the map","title":"Functions"},{"location":"Components/Filter/#overview_3","text":"The Autocomplete component is used for making suggestions of search terms based on the current user input. It is used both at the past/ and voyage/ endpoint","title":"Overview"},{"location":"Components/Filter/#component-factory","text":"","title":"Component Factory"},{"location":"Components/Filter/#overview_4","text":"Whenenver a filter component is selected, the ComponentFac function switches between serving different components (such as the slider or the autocomplete function) by checking the type of the flatlabel of the selected option(s).","title":"Overview"},{"location":"Components/Filter/#directory","text":"src | |___CommonComponent | | | |___Filter | |___Autocomplete.js | |___Slider.js | |___ComponentFac.js | |___Component |___AreaSelect.jsx |___BoundingBoxFilter.js","title":"Directory"},{"location":"Components/Map/","text":"Map Overview The Map component is used for visualizing voyages data on the map. The visualization includes ports and regions where the voyages begin and end, as well as the general routes each voyage goes. The Map component support features including: full-screen mode zoom in and zoom out cluster / uncluster ports under different zoom levels when click on the places (nodes), display the total number of enslaved people whose voyages start from this place to other places, or voyages which end in this place that come from other places in a popup window when click on the routes (curves), display the aggregated number of enslaved people from all voyages that go through that segment of the route in a popup window External Package Used Leaflet Leaflet.markercluster : used to cluster / uncluster nodes under different zoom levels Leaflet.curve : used to render the curves on the map Functions Name Functionality ReadFeature Receive routes and nodes information from server. Draw the clustered nodes on the map drawUpdate Draw the curves on the map Customization The style of the nodes / clustered nodes can be set in Style.css . Use leaflet function divIcon() to create a customized icon and use it as the node icon. The style of nodes and curves can also be set they are rendered when passed as parameters. Directory The following directory shows all files related to map. src | |___VoyageApp | |___Component | |___mapping | Spatial.js | Style.css | |___VoyageMap.js","title":"Map"},{"location":"Components/Map/#map","text":"","title":"Map"},{"location":"Components/Map/#overview","text":"The Map component is used for visualizing voyages data on the map. The visualization includes ports and regions where the voyages begin and end, as well as the general routes each voyage goes. The Map component support features including: full-screen mode zoom in and zoom out cluster / uncluster ports under different zoom levels when click on the places (nodes), display the total number of enslaved people whose voyages start from this place to other places, or voyages which end in this place that come from other places in a popup window when click on the routes (curves), display the aggregated number of enslaved people from all voyages that go through that segment of the route in a popup window","title":"Overview"},{"location":"Components/Map/#external-package-used","text":"","title":"External Package Used"},{"location":"Components/Map/#leaflet","text":"Leaflet.markercluster : used to cluster / uncluster nodes under different zoom levels Leaflet.curve : used to render the curves on the map","title":"Leaflet"},{"location":"Components/Map/#functions","text":"Name Functionality ReadFeature Receive routes and nodes information from server. Draw the clustered nodes on the map drawUpdate Draw the curves on the map","title":"Functions"},{"location":"Components/Map/#customization","text":"The style of the nodes / clustered nodes can be set in Style.css . Use leaflet function divIcon() to create a customized icon and use it as the node icon. The style of nodes and curves can also be set they are rendered when passed as parameters.","title":"Customization"},{"location":"Components/Map/#directory","text":"The following directory shows all files related to map. src | |___VoyageApp | |___Component | |___mapping | Spatial.js | Style.css | |___VoyageMap.js","title":"Directory"},{"location":"Components/Modals/","text":"Modal Overview The Modal component is an interface for visualizing voyage data and is used at the table component in both /voyage and /past endpoint. It employs MUI Modal and Accordion as the main components. An example Voyage Modal component looks like following: Packages Used MUI Modal MUI Accordion Props Parameter Names Functionality voyageOpen Specify whether to render the voyage modal in front of the webpage setVoyageOpen Set the boolean value of voyageOpen voyageId Specify the voyage ID to open the corresponding modal setUVOpen Set the boolean value of UVOpen setUrl Set the value of url Customization The style of the modal can be set in modalStyle in the file. The MUI Accordion is rewritten to support expanding either single or multiple items. Directory The following directory shows all files related to Modal. src | |___CommonComponent | |___VoyageModal.js","title":"Modal"},{"location":"Components/Modals/#modal","text":"","title":"Modal"},{"location":"Components/Modals/#overview","text":"The Modal component is an interface for visualizing voyage data and is used at the table component in both /voyage and /past endpoint. It employs MUI Modal and Accordion as the main components. An example Voyage Modal component looks like following:","title":"Overview"},{"location":"Components/Modals/#packages-used","text":"MUI Modal MUI Accordion","title":"Packages Used"},{"location":"Components/Modals/#props","text":"Parameter Names Functionality voyageOpen Specify whether to render the voyage modal in front of the webpage setVoyageOpen Set the boolean value of voyageOpen voyageId Specify the voyage ID to open the corresponding modal setUVOpen Set the boolean value of UVOpen setUrl Set the value of url","title":"Props"},{"location":"Components/Modals/#customization","text":"The style of the modal can be set in modalStyle in the file. The MUI Accordion is rewritten to support expanding either single or multiple items.","title":"Customization"},{"location":"Components/Modals/#directory","text":"The following directory shows all files related to Modal. src | |___CommonComponent | |___VoyageModal.js","title":"Directory"},{"location":"Components/Network/","text":"Network Overview Network is a component used to display the network diagram of the relationship between enslaver, enslaved people, and voyage. - red node: enslaved people - green node: enslaver - orange node: voyage - bigger node: selected enslaver/enslaved people You can hold mouse left key to drag the graph, you can use mouse wheel to zoom in and out. You can drag the node, and double click the enslaver node or enslaved people node to browse the relation graph. The selected people name is shown in the title, and it is isolated with other component. If you double click node to browse to other people's relation graph, it will change the selected people, but this change will not influence other component. And when you go to other component and come back to network, the network will be reset. Use Case User could select some people in PAST page table, and click CONNECTION button and go to network tab to see the network. Or click the chip in Enslaver Alias column in enslaved table, or click the chip in Number Enslaved column in enslaver table, and go to network tab to see the network. props selectedData: Selected data is an Object to tell network the selected people's id and the type. It has three field: enslaver, enslaved, type. enslaver is an Array which contain all the selected enslaver's id, enslaved is the similar but the enslaved people's id. type is a string which represent enslaver/enslaved which one is current target. This design allow table to support deal with enslaver and enslaved at the same time. width, height: User can use these two props to customize the size of network component. Notification Network can't support too many node, so if the total node is over 100, it will only show a part of the network. And inorder to avoid having too many node, user can only allow to select no more than 10 people. The API sever will ben the client who sent too many request in a short time, in order to prevent sending too many request, we change the behavior of clicking the chip in the enslaver table, Number Enslaved column. Originally, it will show all the relationship of the enslaved people. It need to make a query of each enslaved people, and some enslaver have hundreds of enslaved people, that will crash the page. So now it will only show the relationship of the enslaver. Because all the enslaved people is connected to that enslaver, so the graph is similar, just it will ignore the relationship between enslaved people and other enslaver.","title":"Network"},{"location":"Components/Network/#network","text":"","title":"Network"},{"location":"Components/Network/#overview","text":"Network is a component used to display the network diagram of the relationship between enslaver, enslaved people, and voyage. - red node: enslaved people - green node: enslaver - orange node: voyage - bigger node: selected enslaver/enslaved people You can hold mouse left key to drag the graph, you can use mouse wheel to zoom in and out. You can drag the node, and double click the enslaver node or enslaved people node to browse the relation graph. The selected people name is shown in the title, and it is isolated with other component. If you double click node to browse to other people's relation graph, it will change the selected people, but this change will not influence other component. And when you go to other component and come back to network, the network will be reset.","title":"Overview"},{"location":"Components/Network/#use-case","text":"User could select some people in PAST page table, and click CONNECTION button and go to network tab to see the network. Or click the chip in Enslaver Alias column in enslaved table, or click the chip in Number Enslaved column in enslaver table, and go to network tab to see the network.","title":"Use Case"},{"location":"Components/Network/#props","text":"","title":"props"},{"location":"Components/Network/#selecteddata","text":"Selected data is an Object to tell network the selected people's id and the type. It has three field: enslaver, enslaved, type. enslaver is an Array which contain all the selected enslaver's id, enslaved is the similar but the enslaved people's id. type is a string which represent enslaver/enslaved which one is current target. This design allow table to support deal with enslaver and enslaved at the same time.","title":"selectedData:"},{"location":"Components/Network/#width-height","text":"User can use these two props to customize the size of network component.","title":"width, height:"},{"location":"Components/Network/#notification","text":"Network can't support too many node, so if the total node is over 100, it will only show a part of the network. And inorder to avoid having too many node, user can only allow to select no more than 10 people. The API sever will ben the client who sent too many request in a short time, in order to prevent sending too many request, we change the behavior of clicking the chip in the enslaver table, Number Enslaved column. Originally, it will show all the relationship of the enslaved people. It need to make a query of each enslaved people, and some enslaver have hundreds of enslaved people, that will crash the page. So now it will only show the relationship of the enslaver. Because all the enslaved people is connected to that enslaver, so the graph is similar, just it will ignore the relationship between enslaved people and other enslaver.","title":"Notification"},{"location":"Components/Option_Selector/","text":"Option Selector Overview The database we use is powerful, there are thousands of variable to describe one element. It support vary detail information, but also make the data complex for developer. Option Selector is a developer tool to deal with is problem. Use Case 0. open Option Selector Go to the endpoint /optionSelector 1. Variable tree: The data for one element we get from database is an js object. User can see all the variable key in a hierarchical dropdown tree menu at the left side of the page. So that user can dive into the variable they want, and not been confused by thousands of variable. 2. Change endpoint User can input the endpoint in the input box and click set endpoint to change the endpoint. The default endpoint is voyage/ The other supported endpoint is: Enslaved: past/enslaved/ Enslavers: past/enslavers/ Voyages: voyage/ Places: geo/ Estimates: assessment/ 3. Print data User can input the id of the data and click PRINT button to print the data in console. So that user can see what the data look like. 4. Select variable User can click the check box on the left of the variable to select the variable. The selected variable will show as an input box with its variable name and flat label in the right side of the page. You can change the flat label and click X button to de-selected them. This Use case is widely use in our project. Because the whatever the variable name and the origin flat label is very long, and we like to custom them in a shorter version in dropdown, or table header. 5. Export & Import User can click the EXPORT button to export the selected variable as an json field. And user can click IMPORT button to import the other selected variable json field. It is very useful when cooperate with the teammate. we use the variable tree too browse the variable and discuss which variable we need then we can select the variables rename them, export them and share with all the teammate.","title":"Option Selector"},{"location":"Components/Option_Selector/#option-selector","text":"","title":"Option Selector"},{"location":"Components/Option_Selector/#overview","text":"The database we use is powerful, there are thousands of variable to describe one element. It support vary detail information, but also make the data complex for developer. Option Selector is a developer tool to deal with is problem.","title":"Overview"},{"location":"Components/Option_Selector/#use-case","text":"","title":"Use Case"},{"location":"Components/Option_Selector/#0-open-option-selector","text":"Go to the endpoint /optionSelector","title":"0. open Option Selector"},{"location":"Components/Option_Selector/#1-variable-tree","text":"The data for one element we get from database is an js object. User can see all the variable key in a hierarchical dropdown tree menu at the left side of the page. So that user can dive into the variable they want, and not been confused by thousands of variable.","title":"1. Variable tree:"},{"location":"Components/Option_Selector/#2-change-endpoint","text":"User can input the endpoint in the input box and click set endpoint to change the endpoint. The default endpoint is voyage/ The other supported endpoint is: Enslaved: past/enslaved/ Enslavers: past/enslavers/ Voyages: voyage/ Places: geo/ Estimates: assessment/","title":"2. Change endpoint"},{"location":"Components/Option_Selector/#3-print-data","text":"User can input the id of the data and click PRINT button to print the data in console. So that user can see what the data look like.","title":"3. Print data"},{"location":"Components/Option_Selector/#4-select-variable","text":"User can click the check box on the left of the variable to select the variable. The selected variable will show as an input box with its variable name and flat label in the right side of the page. You can change the flat label and click X button to de-selected them. This Use case is widely use in our project. Because the whatever the variable name and the origin flat label is very long, and we like to custom them in a shorter version in dropdown, or table header.","title":"4. Select variable"},{"location":"Components/Option_Selector/#5-export-import","text":"User can click the EXPORT button to export the selected variable as an json field. And user can click IMPORT button to import the other selected variable json field. It is very useful when cooperate with the teammate. we use the variable tree too browse the variable and discuss which variable we need then we can select the variables rename them, export them and share with all the teammate.","title":"5. Export &amp; Import"},{"location":"Components/Pivot_Table/","text":"Pivot table Overview A pivot table is a table of grouped values that aggregates the individual items of a more extensive table within one or more discrete categories. The summary include sums, averages, or other statistics (Normalized rows, normalized columns), which the pivot table groups together using a chosen aggregation function applied to the grouped values. External package used @mui/material/TableContainer : used to create container for drawing tables. @mui/material/Table : used to render the elegant pivot table to display sets of data, which could be highly customized. Props Parameter Names Type Functionality filter_object object An object with dictionary contained contraints specified by filter for visualizing data on Pivot table (e.g., group_by parameters, voyage ID ranges). dataset Integer Specify which dataset to use (0 for trans-Atlantic, 1 for intra-America). Functions Name Functionality PivotTable Generate drop down menus for column/row selection and which data to show in cell, render radio button for selecting aggregation function used, call the function \"Pivot\" to render the table according to selected columns/rows. Pivot Draw the Pivot Table according to params given by caller function \"PivotTable\" . Directory The following directory shows all files related to map. src | |___VoyageApp | |___Component | |___Pivot.js |___PivotTable.js","title":"Pivot table"},{"location":"Components/Pivot_Table/#pivot-table","text":"","title":"Pivot table"},{"location":"Components/Pivot_Table/#overview","text":"A pivot table is a table of grouped values that aggregates the individual items of a more extensive table within one or more discrete categories. The summary include sums, averages, or other statistics (Normalized rows, normalized columns), which the pivot table groups together using a chosen aggregation function applied to the grouped values.","title":"Overview"},{"location":"Components/Pivot_Table/#external-package-used","text":"@mui/material/TableContainer : used to create container for drawing tables. @mui/material/Table : used to render the elegant pivot table to display sets of data, which could be highly customized.","title":"External package used"},{"location":"Components/Pivot_Table/#props","text":"Parameter Names Type Functionality filter_object object An object with dictionary contained contraints specified by filter for visualizing data on Pivot table (e.g., group_by parameters, voyage ID ranges). dataset Integer Specify which dataset to use (0 for trans-Atlantic, 1 for intra-America).","title":"Props"},{"location":"Components/Pivot_Table/#functions","text":"Name Functionality PivotTable Generate drop down menus for column/row selection and which data to show in cell, render radio button for selecting aggregation function used, call the function \"Pivot\" to render the table according to selected columns/rows. Pivot Draw the Pivot Table according to params given by caller function \"PivotTable\" .","title":"Functions"},{"location":"Components/Pivot_Table/#directory","text":"The following directory shows all files related to map. src | |___VoyageApp | |___Component | |___Pivot.js |___PivotTable.js","title":"Directory"},{"location":"Components/Sankey/","text":"Sankey People sankey Overview The People-sankey component is used for visualizing transaction information and relationship between enslaved people and enslavers. The visualization includes nodes of enslaved people, transaction and enslavers showing role of enslavers, type of transactions, detail information of voyages. The People-sankey component support features including: clicked pop-over of Card component on enslaved people nodes mouseenter pop-over of age and height information on enslaved people nodes, voyages and transactions information including date, year, place and amount on transaction nodes. Voyage-modal component triggered by clickable voyage id button External Package Used d3-sankey d3-sankey Functions Name Functionality renderStory render Card component on enslaved people nodes sankey Draw the sankey graph using nodes list on the canvas Customization The style of canvas, nodes and links be set in Style.css . Directory The following directory shows all files related to sankey. src | |___PASTApp | |___Component | |___Sankey.js |___styles.css Map sankey Overview The Map Sankey is used reflect the prople voyage flow between different sites with importing json data. It allows users interact with map by clicking an edge to get specific path on the map. Besides, if users wants to reset the sankey just click the button on the top of the sankey. In the Sankey file, CircularSankey.js is to defined the passing prop and drawing rules (this has been covered in d3-sankey-circular ). CircularExample.js is about the fetching data, processing data as expected format (it will list as following quote box) Fetching data is not following the d3-sankey drawing style, we have to transfer as a ideal format as following Fetching data & Nodes & Links Fetching data { \"Africa\": { \"Africa\": 168878, \"Brazil\": 3520059, \"Caribbean\": 5063754, \"Europe\": 9179, \"Mainland North America\": 365978, \"Other\": 190794, \"Spanish Mainland Americas\": 644166 }, \"Brazil\": { \"Brazil\": 96539, \"Caribbean\": 3970, \"Mainland North America\": 83, \"Other\": 37, \"Spanish Mainland Americas\": 54734 }, \"Caribbean\": { \"Africa\": 29, \"Caribbean\": 159258, \"Mainland North America\": 45570, \"Other\": 6679, \"Spanish Mainland Americas\": 121479 }, \"Europe\": { \"Mainland North America\": 30 }, \"Mainland North America\": { \"Africa\": 10, \"Brazil\": 2, \"Caribbean\": 7900, \"Mainland North America\": 67808 }, \"Other\": { \"Brazil\": 497, \"Caribbean\": 1182, \"Mainland North America\": 4615, \"Other\": 15, \"Spanish Mainland Americas\": 554 }, \"Spanish Mainland Americas\": { \"Africa\": 70, \"Brazil\": 1299, \"Caribbean\": 736, \"Mainland North America\": 10, \"Spanish Mainland Americas\": 1171 } } Node key: Integer value: Object:{name: ___ , index: ___ , sourceLinks: ____ , targetLinks ____, value: ____, x0: ..., x1: ...., y0: ..., y1: ...} 0: {name: 'Africa', index: 0, sourceLinks: Array(7), targetLinks: Array(4), partOfCycle: true, \u2026} 1: {name: 'Brazil', index: 1, sourceLinks: Array(5), targetLinks: Array(5), partOfCycle: true, \u2026} 2: {name: 'Caribbean', index: 2, sourceLinks: Array(5), targetLinks: Array(6), partOfCycle: true, \u2026} 3: {name: 'Europe', index: 3, sourceLinks: Array(1), targetLinks: Array(1), partOfCycle: false, \u2026} 4: {name: 'Mainland North America', index: 4, sourceLinks: Array(4), targetLinks: Array(7), partOfCycle: true, \u2026} 5: {name: 'Other', index: 5, sourceLinks: Array(5), targetLinks: Array(4), partOfCycle: true, \u2026} 6: {name: 'Spanish Mainland Americas', index: 6, sourceLinks: Array(5), targetLinks: Array(5), partOfCycle: true, \u2026} Link key: Integer value: Object:{source: {Object}, target: {Object}, value: ..., width: ..., y0:..., y1:...} 0: {source: {\u2026}, target: {\u2026}, value: 168878, index: 0, circular: true, \u2026} 1: {source: {\u2026}, target: {\u2026}, value: 3520059, index: 1, circular: false, \u2026} 2: {source: {\u2026}, target: {\u2026}, value: 5063754, index: 2, circular: false, \u2026} 3: {source: {\u2026}, target: {\u2026}, value: 9179, index: 3, circular: false, \u2026} 4: {source: {\u2026}, target: {\u2026}, value: 365978, index: 4, circular: false, \u2026} 5: {source: {\u2026}, target: {\u2026}, value: 190794, index: 5, circular: false, \u2026} 6: {source: {\u2026}, target: {\u2026}, value: 644166, index: 6, circular: false, \u2026} 7: {source: {\u2026}, target: {\u2026}, value: 96539, index: 7, circular: true, \u2026} 8: {source: {\u2026}, target: {\u2026}, value: 3970, index: 8, circular: false, \u2026} 9: {source: {\u2026}, target: {\u2026}, value: 83, index: 9, circular: false, \u2026} 10: {source: {\u2026}, target: {\u2026}, value: 37, index: 10, circular: false, \u2026} External Package Used d3 d3 d3-sacle d3-shape d3-sankey-circular visx visx This package is used to plot the verital and horizontal block (mainly for node blocks) react-query react-query This package is used to fetching, caching, synchronizing and updating server state Functions Name Functionality Click Edge Lighten render Card component on enslaved people nodes Hover on Node Lighten all edges which are connected with the hover node Connect with Map Display the data which is related to the chosen edge Directory src | |___PASTApp | |___Component |___ mapping |___sankey |___CircularExample.js |___CircularSankey.js |___var.js","title":"Sankey"},{"location":"Components/Sankey/#sankey","text":"","title":"Sankey"},{"location":"Components/Sankey/#people-sankey","text":"","title":"People sankey"},{"location":"Components/Sankey/#overview","text":"The People-sankey component is used for visualizing transaction information and relationship between enslaved people and enslavers. The visualization includes nodes of enslaved people, transaction and enslavers showing role of enslavers, type of transactions, detail information of voyages. The People-sankey component support features including: clicked pop-over of Card component on enslaved people nodes mouseenter pop-over of age and height information on enslaved people nodes, voyages and transactions information including date, year, place and amount on transaction nodes. Voyage-modal component triggered by clickable voyage id button","title":"Overview"},{"location":"Components/Sankey/#external-package-used","text":"","title":"External Package Used"},{"location":"Components/Sankey/#d3-sankey","text":"d3-sankey","title":"d3-sankey"},{"location":"Components/Sankey/#functions","text":"Name Functionality renderStory render Card component on enslaved people nodes sankey Draw the sankey graph using nodes list on the canvas","title":"Functions"},{"location":"Components/Sankey/#customization","text":"The style of canvas, nodes and links be set in Style.css .","title":"Customization"},{"location":"Components/Sankey/#directory","text":"The following directory shows all files related to sankey. src | |___PASTApp | |___Component | |___Sankey.js |___styles.css","title":"Directory"},{"location":"Components/Sankey/#map-sankey","text":"","title":"Map sankey"},{"location":"Components/Sankey/#overview_1","text":"The Map Sankey is used reflect the prople voyage flow between different sites with importing json data. It allows users interact with map by clicking an edge to get specific path on the map. Besides, if users wants to reset the sankey just click the button on the top of the sankey. In the Sankey file, CircularSankey.js is to defined the passing prop and drawing rules (this has been covered in d3-sankey-circular ). CircularExample.js is about the fetching data, processing data as expected format (it will list as following quote box) Fetching data is not following the d3-sankey drawing style, we have to transfer as a ideal format as following Fetching data & Nodes & Links Fetching data { \"Africa\": { \"Africa\": 168878, \"Brazil\": 3520059, \"Caribbean\": 5063754, \"Europe\": 9179, \"Mainland North America\": 365978, \"Other\": 190794, \"Spanish Mainland Americas\": 644166 }, \"Brazil\": { \"Brazil\": 96539, \"Caribbean\": 3970, \"Mainland North America\": 83, \"Other\": 37, \"Spanish Mainland Americas\": 54734 }, \"Caribbean\": { \"Africa\": 29, \"Caribbean\": 159258, \"Mainland North America\": 45570, \"Other\": 6679, \"Spanish Mainland Americas\": 121479 }, \"Europe\": { \"Mainland North America\": 30 }, \"Mainland North America\": { \"Africa\": 10, \"Brazil\": 2, \"Caribbean\": 7900, \"Mainland North America\": 67808 }, \"Other\": { \"Brazil\": 497, \"Caribbean\": 1182, \"Mainland North America\": 4615, \"Other\": 15, \"Spanish Mainland Americas\": 554 }, \"Spanish Mainland Americas\": { \"Africa\": 70, \"Brazil\": 1299, \"Caribbean\": 736, \"Mainland North America\": 10, \"Spanish Mainland Americas\": 1171 } } Node key: Integer value: Object:{name: ___ , index: ___ , sourceLinks: ____ , targetLinks ____, value: ____, x0: ..., x1: ...., y0: ..., y1: ...} 0: {name: 'Africa', index: 0, sourceLinks: Array(7), targetLinks: Array(4), partOfCycle: true, \u2026} 1: {name: 'Brazil', index: 1, sourceLinks: Array(5), targetLinks: Array(5), partOfCycle: true, \u2026} 2: {name: 'Caribbean', index: 2, sourceLinks: Array(5), targetLinks: Array(6), partOfCycle: true, \u2026} 3: {name: 'Europe', index: 3, sourceLinks: Array(1), targetLinks: Array(1), partOfCycle: false, \u2026} 4: {name: 'Mainland North America', index: 4, sourceLinks: Array(4), targetLinks: Array(7), partOfCycle: true, \u2026} 5: {name: 'Other', index: 5, sourceLinks: Array(5), targetLinks: Array(4), partOfCycle: true, \u2026} 6: {name: 'Spanish Mainland Americas', index: 6, sourceLinks: Array(5), targetLinks: Array(5), partOfCycle: true, \u2026} Link key: Integer value: Object:{source: {Object}, target: {Object}, value: ..., width: ..., y0:..., y1:...} 0: {source: {\u2026}, target: {\u2026}, value: 168878, index: 0, circular: true, \u2026} 1: {source: {\u2026}, target: {\u2026}, value: 3520059, index: 1, circular: false, \u2026} 2: {source: {\u2026}, target: {\u2026}, value: 5063754, index: 2, circular: false, \u2026} 3: {source: {\u2026}, target: {\u2026}, value: 9179, index: 3, circular: false, \u2026} 4: {source: {\u2026}, target: {\u2026}, value: 365978, index: 4, circular: false, \u2026} 5: {source: {\u2026}, target: {\u2026}, value: 190794, index: 5, circular: false, \u2026} 6: {source: {\u2026}, target: {\u2026}, value: 644166, index: 6, circular: false, \u2026} 7: {source: {\u2026}, target: {\u2026}, value: 96539, index: 7, circular: true, \u2026} 8: {source: {\u2026}, target: {\u2026}, value: 3970, index: 8, circular: false, \u2026} 9: {source: {\u2026}, target: {\u2026}, value: 83, index: 9, circular: false, \u2026} 10: {source: {\u2026}, target: {\u2026}, value: 37, index: 10, circular: false, \u2026}","title":"Overview"},{"location":"Components/Sankey/#external-package-used_1","text":"","title":"External Package Used"},{"location":"Components/Sankey/#d3","text":"d3 d3-sacle d3-shape d3-sankey-circular","title":"d3"},{"location":"Components/Sankey/#visx","text":"visx This package is used to plot the verital and horizontal block (mainly for node blocks)","title":"visx"},{"location":"Components/Sankey/#react-query","text":"react-query This package is used to fetching, caching, synchronizing and updating server state","title":"react-query"},{"location":"Components/Sankey/#functions_1","text":"Name Functionality Click Edge Lighten render Card component on enslaved people nodes Hover on Node Lighten all edges which are connected with the hover node Connect with Map Display the data which is related to the chosen edge","title":"Functions"},{"location":"Components/Sankey/#directory_1","text":"src | |___PASTApp | |___Component |___ mapping |___sankey |___CircularExample.js |___CircularSankey.js |___var.js","title":"Directory"},{"location":"Components/Table/","text":"Table Overview The Table component is used for visualizing voyages/enslaved people/enslavers data from the database. Based on different types of data, the Table component can show distinct features and functions. The Table component support features including: Common Features adjust the rows' density by clicking DENSITY button choose the columns required to demonstrate by selecting multiple fields when click COLUMNS button export/print the current table by clicking EXPORT button pagination: switch to different page & choose the rows shown per page sorting: sort the selected field in ascending \u2191 or descending \u2193 order or unsort Voyage Table open the corresponding Voyage Modal when click the row open the UV Modal when click the hyperlink in Documentary Sources column Enslaved Table select one or more rows to view the connections with enslavers switch to ENSLAVER TABLE OR GALLERY open the Past Modal when click the name in Enslaver Alias column open the Voyage Modal when click the voyage ID in Transaction Voyage ID column Enslaver Table select one or more rows to view the connections with enslaved people switch to ENSLAVED TABLE OR GALLERY open the Past Modal when click the number in Number Enslaved column Directory The following directory shows all files related to Table. src |___CommonComponent |___Table |___Cell.js |___ColumnSelector.js |___Table.js |___tableStyle.css","title":"Table"},{"location":"Components/Table/#table","text":"","title":"Table"},{"location":"Components/Table/#overview","text":"The Table component is used for visualizing voyages/enslaved people/enslavers data from the database. Based on different types of data, the Table component can show distinct features and functions. The Table component support features including:","title":"Overview"},{"location":"Components/Table/#common-features","text":"adjust the rows' density by clicking DENSITY button choose the columns required to demonstrate by selecting multiple fields when click COLUMNS button export/print the current table by clicking EXPORT button pagination: switch to different page & choose the rows shown per page sorting: sort the selected field in ascending \u2191 or descending \u2193 order or unsort","title":"Common Features"},{"location":"Components/Table/#voyage-table","text":"open the corresponding Voyage Modal when click the row open the UV Modal when click the hyperlink in Documentary Sources column","title":"Voyage Table"},{"location":"Components/Table/#enslaved-table","text":"select one or more rows to view the connections with enslavers switch to ENSLAVER TABLE OR GALLERY open the Past Modal when click the name in Enslaver Alias column open the Voyage Modal when click the voyage ID in Transaction Voyage ID column","title":"Enslaved Table"},{"location":"Components/Table/#enslaver-table","text":"select one or more rows to view the connections with enslaved people switch to ENSLAVED TABLE OR GALLERY open the Past Modal when click the number in Number Enslaved column","title":"Enslaver Table"},{"location":"Components/Table/#directory","text":"The following directory shows all files related to Table. src |___CommonComponent |___Table |___Cell.js |___ColumnSelector.js |___Table.js |___tableStyle.css","title":"Directory"},{"location":"Components/UVmodals/","text":"UVModal Overview The UVModal component is an interface for visualizing IIIF manifest with the help of universal viewer and is used at the /documents endpoint and table component in /voyage endpoint. It employs MUI components Modal and Box as a window container in front of the webpage embedding the universal viewer with entered URL of a IIIF manifest and supports features including: Trigger the full-screen mode Zoom In and Out of the image Rotate the image Download and share the image View the information of the image External Components & Packages Used MUI Modal MUI Box Universal Viewer Props Parameter Names Functionality uvOpen Specify whether to render the universal viewer modal in front of the webpage setUVOpen Set the boolean value of uvOpen url Specify the url of IIIF manifest visualized by the universal viewer modal Functions Name Functionality useUniversalViewer Resize the universal viewer modal corresponding to the change of window size. UniversalViewer Display the universal viwer with the entered url of IIIF manifest. UVModal Render the modal containing the universal viewer triggered by user. Directory The following directory shows all files related to UVModal. src | |___CommonComponent | |___UVModal.js","title":"UVModal"},{"location":"Components/UVmodals/#uvmodal","text":"","title":"UVModal"},{"location":"Components/UVmodals/#overview","text":"The UVModal component is an interface for visualizing IIIF manifest with the help of universal viewer and is used at the /documents endpoint and table component in /voyage endpoint. It employs MUI components Modal and Box as a window container in front of the webpage embedding the universal viewer with entered URL of a IIIF manifest and supports features including: Trigger the full-screen mode Zoom In and Out of the image Rotate the image Download and share the image View the information of the image","title":"Overview"},{"location":"Components/UVmodals/#external-components-packages-used","text":"MUI Modal MUI Box Universal Viewer","title":"External Components &amp; Packages Used"},{"location":"Components/UVmodals/#props","text":"Parameter Names Functionality uvOpen Specify whether to render the universal viewer modal in front of the webpage setUVOpen Set the boolean value of uvOpen url Specify the url of IIIF manifest visualized by the universal viewer modal","title":"Props"},{"location":"Components/UVmodals/#functions","text":"Name Functionality useUniversalViewer Resize the universal viewer modal corresponding to the change of window size. UniversalViewer Display the universal viwer with the entered url of IIIF manifest. UVModal Render the modal containing the universal viewer triggered by user.","title":"Functions"},{"location":"Components/UVmodals/#directory","text":"The following directory shows all files related to UVModal. src | |___CommonComponent | |___UVModal.js","title":"Directory"},{"location":"Methods/Component_Fac/","text":"","title":"Component Fac"},{"location":"Methods/Data_Passing/","text":"Data Passing In React, we often encounter the need for components to communicate with each other. The essence of a component is a function. When calling a component, we can pass the required variables to another component like passing parameters. The most natural way to pass parameters is from parent component to child component, but many times what we need is to pass variables between sibling components. The solution to achieve this kind of variable passing is to use useState() in the parent component of the sibling component (or create a new one if it doesn't exist) to define a variable and its setter and pass it to the child component. In the child component, you can use setters to change the value of the variable, and listen to whether the value of the child component changes to re-render the component. Pass By props.state We tried many ways to pass variables between components, but we finally decide using the most basic way, that is using props as the main method. Because using props is simple and robust, and there is no black box. Here are some example we use to pass variables by props. 1. Base case Put the param in Child component's state field, the param could be define previously or directly assign a value in state. Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"Base example\") return ( <Child state={{param1, setParam1, constParam: \"const param\"}} > \"Children\" </Child> ) } in Child.js export function Child(props){ const{param1, setParam1, constParam} = props.state const children = props.children return `${children} ${param1} ${constParam}`; } 2. Partially Using State You are not necessary to get all the params from state, and you can rename it Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"example 2\") return ( <Child state={{param1, setParam1}} /> ) } in Child.js export function Child(props){ const{param1: myParam} = props.state return myParam; } 3. Package The State You can package all the state and pass it to multiple children, And Child can only get the param their need. Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"example 3 param1\") const [param2, setParam2] = useState(\"example 3 param2\") const state={param1, setParam1, param2, setParam2} return ( <> <Child1 state={state} /> <Child2 state={state} /> </> ) } in Child1.js export function Child1(props){ const{param1, setParam1} = props.state return param1; } in Child2.js export function Child2(props){ const{param2, setParam2} = props.state return param2; } 4. Package The State You can use {...props.state} to pass all inherited state. Example in GrandParent.js export function GrandParent(props){ const [grandParam, setGrandParam] = useState(\"example 4\") return ( <Parent state={{grandParam, setGrandParam}} /> ) } in Parent.js export function Parent(props){ return ( <Child state={{...props.state}} /> ) } in Child.js export function Child(props){ const{grandParam, setGrandParam} = props.state return grandParam; } 5. Combination The above methods can be combined with each other. Example in GrandParent.js export function GrandParent(props){ const [grandParam, setGrandParam] = useState(\"example 5\") return ( <Parent state={{grandParam, setGrandParam}} /> ) } in Parent.js export function Parent(props){ const [parentParam1, setParentParam1] = useState(\"parent param 1\") const [parentParam2, setParentParam2] = useState(\"parent param 2\") const state = {parentParam1, parentParam2} return ( <Child state={{...props.state, ...state, constParam: \"const param\"}} /> ) } in Child.js export function Child(props){ const{grandParam, parentParam1, parentParam2, constParam} = props.state return `${grandParam}, ${parentParam1}, ${parentParam2}, ${constParam}`; } Pass By Context When the nesting relationship of components is too complex to use props, we will use context to pass parameters. But once the context is used, it means that the components connected by the context will become inseparable, it will reducing the modularity of the code.","title":"Data Passing"},{"location":"Methods/Data_Passing/#data-passing","text":"In React, we often encounter the need for components to communicate with each other. The essence of a component is a function. When calling a component, we can pass the required variables to another component like passing parameters. The most natural way to pass parameters is from parent component to child component, but many times what we need is to pass variables between sibling components. The solution to achieve this kind of variable passing is to use useState() in the parent component of the sibling component (or create a new one if it doesn't exist) to define a variable and its setter and pass it to the child component. In the child component, you can use setters to change the value of the variable, and listen to whether the value of the child component changes to re-render the component.","title":"Data Passing"},{"location":"Methods/Data_Passing/#pass-by-propsstate","text":"We tried many ways to pass variables between components, but we finally decide using the most basic way, that is using props as the main method. Because using props is simple and robust, and there is no black box. Here are some example we use to pass variables by props.","title":"Pass By props.state"},{"location":"Methods/Data_Passing/#1-base-case","text":"Put the param in Child component's state field, the param could be define previously or directly assign a value in state. Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"Base example\") return ( <Child state={{param1, setParam1, constParam: \"const param\"}} > \"Children\" </Child> ) } in Child.js export function Child(props){ const{param1, setParam1, constParam} = props.state const children = props.children return `${children} ${param1} ${constParam}`; }","title":"1. Base case"},{"location":"Methods/Data_Passing/#2-partially-using-state","text":"You are not necessary to get all the params from state, and you can rename it Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"example 2\") return ( <Child state={{param1, setParam1}} /> ) } in Child.js export function Child(props){ const{param1: myParam} = props.state return myParam; }","title":"2. Partially Using State"},{"location":"Methods/Data_Passing/#3-package-the-state","text":"You can package all the state and pass it to multiple children, And Child can only get the param their need. Example in Parent.js export function Parent(props){ const [param1, setParam1] = useState(\"example 3 param1\") const [param2, setParam2] = useState(\"example 3 param2\") const state={param1, setParam1, param2, setParam2} return ( <> <Child1 state={state} /> <Child2 state={state} /> </> ) } in Child1.js export function Child1(props){ const{param1, setParam1} = props.state return param1; } in Child2.js export function Child2(props){ const{param2, setParam2} = props.state return param2; }","title":"3. Package The State"},{"location":"Methods/Data_Passing/#4-package-the-state","text":"You can use {...props.state} to pass all inherited state. Example in GrandParent.js export function GrandParent(props){ const [grandParam, setGrandParam] = useState(\"example 4\") return ( <Parent state={{grandParam, setGrandParam}} /> ) } in Parent.js export function Parent(props){ return ( <Child state={{...props.state}} /> ) } in Child.js export function Child(props){ const{grandParam, setGrandParam} = props.state return grandParam; }","title":"4. Package The State"},{"location":"Methods/Data_Passing/#5-combination","text":"The above methods can be combined with each other. Example in GrandParent.js export function GrandParent(props){ const [grandParam, setGrandParam] = useState(\"example 5\") return ( <Parent state={{grandParam, setGrandParam}} /> ) } in Parent.js export function Parent(props){ const [parentParam1, setParentParam1] = useState(\"parent param 1\") const [parentParam2, setParentParam2] = useState(\"parent param 2\") const state = {parentParam1, parentParam2} return ( <Child state={{...props.state, ...state, constParam: \"const param\"}} /> ) } in Child.js export function Child(props){ const{grandParam, parentParam1, parentParam2, constParam} = props.state return `${grandParam}, ${parentParam1}, ${parentParam2}, ${constParam}`; }","title":"5. Combination"},{"location":"Methods/Data_Passing/#pass-by-context","text":"When the nesting relationship of components is too complex to use props, we will use context to pass parameters. But once the context is used, it means that the components connected by the context will become inseparable, it will reducing the modularity of the code.","title":"Pass By Context"},{"location":"Methods/Filter_Object/","text":"Filter Object Overview Filter Object contains all the filters that have been created. The variables that are filtered on as well as their values will be stored in a dictionary and pass along to other components. When sending requests to the server, these filters will be applied and the result will be updated. Format The filter object is a dictionary which contains the variables and their values, which looks like the following: { \"id\": [ 132469, 786657 ], \"voyage_captainconnection__captain__name\": [ \"Vaughan, Jason\", \"Allboy, John\" ], \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__latitude\": [ -180, 180 ], \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__longitude\": [ -180, 180 ], \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__latitude\": [ -17.017801825707558, 15.752818536900337 ], \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__longitude\": [ -14.765625000000002, 25.312500000000004 ] } Usage The filter object is usually applied when sending requests to the server. The variables and values in the filter object are appended as the request body and send to the server. The following is an exmaple: var data = new FormData(); //create variable for request body for (var property in filter_object) { // append variables and values in filter object to request body filter_object[property].forEach((v) => { if(v.length != 0){ data.append(property, v); } }); } axois.post('url', data=data) // send the request to endpoint Declaration, Set & Delete The filter object created being a useState hook, and pass along to other components. Being a Hook means changeing the filter object requires the function declared in the hook declaration. An example of filter object declaration looks like this: const [filter_obj, set_filter_obj] = useState({}) Adding a new filter to the filter object looks like the following: set_filter_obj({ ...filter_obj, [key]: [values] }) Deleting an entry in the filter object looks like the following: let temp = { ...filter_obj } delete temp[key] set_filter_obj(temp)","title":"Filter Object"},{"location":"Methods/Filter_Object/#filter-object","text":"","title":"Filter Object"},{"location":"Methods/Filter_Object/#overview","text":"Filter Object contains all the filters that have been created. The variables that are filtered on as well as their values will be stored in a dictionary and pass along to other components. When sending requests to the server, these filters will be applied and the result will be updated.","title":"Overview"},{"location":"Methods/Filter_Object/#format","text":"The filter object is a dictionary which contains the variables and their values, which looks like the following: { \"id\": [ 132469, 786657 ], \"voyage_captainconnection__captain__name\": [ \"Vaughan, Jason\", \"Allboy, John\" ], \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__latitude\": [ -180, 180 ], \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__longitude\": [ -180, 180 ], \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__latitude\": [ -17.017801825707558, 15.752818536900337 ], \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__longitude\": [ -14.765625000000002, 25.312500000000004 ] }","title":"Format"},{"location":"Methods/Filter_Object/#usage","text":"The filter object is usually applied when sending requests to the server. The variables and values in the filter object are appended as the request body and send to the server. The following is an exmaple: var data = new FormData(); //create variable for request body for (var property in filter_object) { // append variables and values in filter object to request body filter_object[property].forEach((v) => { if(v.length != 0){ data.append(property, v); } }); } axois.post('url', data=data) // send the request to endpoint","title":"Usage"},{"location":"Methods/Filter_Object/#declaration-set-delete","text":"The filter object created being a useState hook, and pass along to other components. Being a Hook means changeing the filter object requires the function declared in the hook declaration. An example of filter object declaration looks like this: const [filter_obj, set_filter_obj] = useState({}) Adding a new filter to the filter object looks like the following: set_filter_obj({ ...filter_obj, [key]: [values] }) Deleting an entry in the filter object looks like the following: let temp = { ...filter_obj } delete temp[key] set_filter_obj(temp)","title":"Declaration, Set &amp; Delete"},{"location":"Methods/Flat_Files/","text":"Flat_Files Flat files are those static files which can be .json or .js . The purpose of making those flat_files is to set default value lists or customize menu variables. Nested Variable-tree The nested variable-tree files can be found at src/Util/tableVars.js , src/PASTApp/EnslavedApp/vars.js , src/PASTApp/EnslaverApp/vars.js . This is the example from tableVars.js. All of the nested Variable-tree are constructed in this format. The categories of vaiables can be customized. However, please make sure all the variables have been included in the options_flat file, so that the function can find the labels for each variables. functions identify the tail be recognizing the null , so please keep the null export const columnOptions = { \"id\": { \"id\": null, }, \"voyage_ownercrewandcaptain\": { 'voyage_shipownerconnection__owner__name': null, 'voyage_captainconnection__captain__name': null, \"voyage_crew\": { 'voyage_crew__crew_died_complete_voyage': null, 'voyage_crew__crew_first_landing': null, 'voyage_crew__crew_voyage_outset': null, }, }, \"voyage_sourceconnection__text_ref\": { 'voyage_sourceconnection__text_ref': null, }, } The categories of the top level cannot be omitted, and the Cascading will deal with this situatioin appropriately and seperately. \"id\": { \"id\": null, }, Options_Flat Options_flat file provides labels and types for variables. These options_flat files are produced by Option_Selector . Here is a shortcut for those files. And the pathes for each options_flat files are src/VoyageApp/options.json , src/PASTApp/EnslavedApp/options.json , src/PASTApp/EnslaverApp/options.json . { \"dataset\": { \"type\": \"<class 'rest_framework.fields.IntegerField'>\", \"label\": \"Dataset\", \"flatlabel\": \"Dataset\" }, \"last_update\": { \"type\": \"<class 'rest_framework.fields.DateTimeField'>\", \"label\": \"Last update\", \"flatlabel\": \"Last update\" }, \"voyage_in_cd_rom\": { \"type\": \"<class 'rest_framework.fields.BooleanField'>\", \"label\": \"Voyage in 1999 CD-ROM?\", \"flatlabel\": \"Voyage in 1999 CD-ROM?\" }, } Be careful, for now, you cannot directly import the option_flat file to Option_Selector because there is an alien keys, for example \"personal_information\": { \"type\": \"table\", \"label\": \"Personal Information\", \"flatlabel\": \"Personal Information\" } To import the file into Option_Selector, please delete it first, and add it to the option_flat files after you export new option_flat files. Other Default Settings You are free to set default variables for components. For example export var bar_x_vars = [ \"voyage_ship__imputed_nationality__name\", \"voyage_ship__rig_of_vessel__name\", \"voyage_outcome__particular_outcome__name\", \"voyage_outcome__outcome_slaves__name\", \"voyage_outcome__outcome_owner__name\", \"voyage_outcome__vessel_captured_outcome__name\", \"voyage_outcome__resistance__name\", \"voyage_itinerary__imp_port_voyage_begin__geo_location__name\", \"voyage_itinerary__imp_region_voyage_begin__geo_location__name\", \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__name\", \"voyage_itinerary__imp_principal_region_of_slave_purchase__geo_location__name\", \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__name\", \"voyage_itinerary__imp_principal_region_slave_dis__geo_location__name\", \"voyage_itinerary__imp_broad_region_slave_dis__geo_location__name\", \"voyage_itinerary__place_voyage_ended__geo_location__name\", \"voyage_itinerary__region_of_return__geo_location__name\", \"voyage_dates__imp_arrival_at_port_of_dis_yyyy\", ]; export var bar_y_vars = [ \"voyage_dates__imp_length_home_to_disembark\", \"voyage_dates__length_middle_passage_days\", \"voyage_ship__tonnage_mod\", \"voyage_crew__crew_voyage_outset\", \"voyage_crew__crew_first_landing\", \"voyage_slaves_numbers__imp_total_num_slaves_embarked\", \"voyage_slaves_numbers__imp_total_num_slaves_disembarked\", \"voyage_slaves_numbers__imp_jamaican_cash_price\", ]; Please find the correct file to edit, and keep them same formats. Others There are some utils not used. For example hierFalse2True() . You can use them to convert flat variables to a nested format. for example: hierFalse2True(\"voyage_itinerary__region_of_return__geo_location__name\") returns -> { \"voyage_itinerary\": { \"voyage_itinerary__region_of_return:\"{ \"voyage_itinerary__region_of_return__geo_location\":{ \"voyage_itinerary__region_of_return__geo_location__name\":null } } } }","title":"Flat_Files"},{"location":"Methods/Flat_Files/#flat_files","text":"Flat files are those static files which can be .json or .js . The purpose of making those flat_files is to set default value lists or customize menu variables.","title":"Flat_Files"},{"location":"Methods/Flat_Files/#nested-variable-tree","text":"The nested variable-tree files can be found at src/Util/tableVars.js , src/PASTApp/EnslavedApp/vars.js , src/PASTApp/EnslaverApp/vars.js . This is the example from tableVars.js. All of the nested Variable-tree are constructed in this format. The categories of vaiables can be customized. However, please make sure all the variables have been included in the options_flat file, so that the function can find the labels for each variables. functions identify the tail be recognizing the null , so please keep the null export const columnOptions = { \"id\": { \"id\": null, }, \"voyage_ownercrewandcaptain\": { 'voyage_shipownerconnection__owner__name': null, 'voyage_captainconnection__captain__name': null, \"voyage_crew\": { 'voyage_crew__crew_died_complete_voyage': null, 'voyage_crew__crew_first_landing': null, 'voyage_crew__crew_voyage_outset': null, }, }, \"voyage_sourceconnection__text_ref\": { 'voyage_sourceconnection__text_ref': null, }, } The categories of the top level cannot be omitted, and the Cascading will deal with this situatioin appropriately and seperately. \"id\": { \"id\": null, },","title":"Nested Variable-tree"},{"location":"Methods/Flat_Files/#options_flat","text":"Options_flat file provides labels and types for variables. These options_flat files are produced by Option_Selector . Here is a shortcut for those files. And the pathes for each options_flat files are src/VoyageApp/options.json , src/PASTApp/EnslavedApp/options.json , src/PASTApp/EnslaverApp/options.json . { \"dataset\": { \"type\": \"<class 'rest_framework.fields.IntegerField'>\", \"label\": \"Dataset\", \"flatlabel\": \"Dataset\" }, \"last_update\": { \"type\": \"<class 'rest_framework.fields.DateTimeField'>\", \"label\": \"Last update\", \"flatlabel\": \"Last update\" }, \"voyage_in_cd_rom\": { \"type\": \"<class 'rest_framework.fields.BooleanField'>\", \"label\": \"Voyage in 1999 CD-ROM?\", \"flatlabel\": \"Voyage in 1999 CD-ROM?\" }, } Be careful, for now, you cannot directly import the option_flat file to Option_Selector because there is an alien keys, for example \"personal_information\": { \"type\": \"table\", \"label\": \"Personal Information\", \"flatlabel\": \"Personal Information\" } To import the file into Option_Selector, please delete it first, and add it to the option_flat files after you export new option_flat files.","title":"Options_Flat"},{"location":"Methods/Flat_Files/#other-default-settings","text":"You are free to set default variables for components. For example export var bar_x_vars = [ \"voyage_ship__imputed_nationality__name\", \"voyage_ship__rig_of_vessel__name\", \"voyage_outcome__particular_outcome__name\", \"voyage_outcome__outcome_slaves__name\", \"voyage_outcome__outcome_owner__name\", \"voyage_outcome__vessel_captured_outcome__name\", \"voyage_outcome__resistance__name\", \"voyage_itinerary__imp_port_voyage_begin__geo_location__name\", \"voyage_itinerary__imp_region_voyage_begin__geo_location__name\", \"voyage_itinerary__imp_principal_place_of_slave_purchase__geo_location__name\", \"voyage_itinerary__imp_principal_region_of_slave_purchase__geo_location__name\", \"voyage_itinerary__imp_principal_port_slave_dis__geo_location__name\", \"voyage_itinerary__imp_principal_region_slave_dis__geo_location__name\", \"voyage_itinerary__imp_broad_region_slave_dis__geo_location__name\", \"voyage_itinerary__place_voyage_ended__geo_location__name\", \"voyage_itinerary__region_of_return__geo_location__name\", \"voyage_dates__imp_arrival_at_port_of_dis_yyyy\", ]; export var bar_y_vars = [ \"voyage_dates__imp_length_home_to_disembark\", \"voyage_dates__length_middle_passage_days\", \"voyage_ship__tonnage_mod\", \"voyage_crew__crew_voyage_outset\", \"voyage_crew__crew_first_landing\", \"voyage_slaves_numbers__imp_total_num_slaves_embarked\", \"voyage_slaves_numbers__imp_total_num_slaves_disembarked\", \"voyage_slaves_numbers__imp_jamaican_cash_price\", ]; Please find the correct file to edit, and keep them same formats.","title":"Other Default Settings"},{"location":"Methods/Flat_Files/#others","text":"There are some utils not used. For example hierFalse2True() . You can use them to convert flat variables to a nested format. for example: hierFalse2True(\"voyage_itinerary__region_of_return__geo_location__name\") returns -> { \"voyage_itinerary\": { \"voyage_itinerary__region_of_return:\"{ \"voyage_itinerary__region_of_return__geo_location\":{ \"voyage_itinerary__region_of_return__geo_location__name\":null } } } }","title":"Others"},{"location":"Methods/Lazy_Loading/","text":"Lazy Loading The application adopts lazy-loading to reduce server burden under concurrent visits and improve system performance. Lazy Loading at Documents In Document page, we use lazy-loading to construct IIIF thumbnail galleries and make a seamless api requesting See Document for detail Lazy Loading at HomePage The packages we used in Home Page is import { LazyLoadComponent, trackWindowScroll } from \"react-lazy-load-image-component\"; import \"react-lazy-load-image-component/src/effects/opacity.css\"; The usage of home page lazy loading can be found at src/HomeApp/ArchiveHome.js , and the usage of ArchiveHome.js can be found at src/HomeApp/HomePage.js . ArchiveHome takes an empty box as a placeholder. The purpose of making ArchiveHome is to check loading according to scrollPosition . The documentation can be found at here <LazyLoadComponent placeholder={<Box sx={{ width: 300, height: 300 }} />} scrollPosition={scrollPosition} threshold={1} > In order to activate lazy loading at HomePage , HomePage renders <NetworkComponent/> first as a initial placeholder. <List> <NetworkComponent/> <Divider/> <ArchiveHome components={sample} scrollPosition={window.scrollY}/> </List>","title":"Lazy Loading"},{"location":"Methods/Lazy_Loading/#lazy-loading","text":"The application adopts lazy-loading to reduce server burden under concurrent visits and improve system performance.","title":"Lazy Loading"},{"location":"Methods/Lazy_Loading/#lazy-loading-at-documents","text":"In Document page, we use lazy-loading to construct IIIF thumbnail galleries and make a seamless api requesting See Document for detail","title":"Lazy Loading at Documents"},{"location":"Methods/Lazy_Loading/#lazy-loading-at-homepage","text":"The packages we used in Home Page is import { LazyLoadComponent, trackWindowScroll } from \"react-lazy-load-image-component\"; import \"react-lazy-load-image-component/src/effects/opacity.css\"; The usage of home page lazy loading can be found at src/HomeApp/ArchiveHome.js , and the usage of ArchiveHome.js can be found at src/HomeApp/HomePage.js . ArchiveHome takes an empty box as a placeholder. The purpose of making ArchiveHome is to check loading according to scrollPosition . The documentation can be found at here <LazyLoadComponent placeholder={<Box sx={{ width: 300, height: 300 }} />} scrollPosition={scrollPosition} threshold={1} > In order to activate lazy loading at HomePage , HomePage renders <NetworkComponent/> first as a initial placeholder. <List> <NetworkComponent/> <Divider/> <ArchiveHome components={sample} scrollPosition={window.scrollY}/> </List>","title":"Lazy Loading at HomePage"},{"location":"Methods/Post_Request/","text":"","title":"Post Request"}]}